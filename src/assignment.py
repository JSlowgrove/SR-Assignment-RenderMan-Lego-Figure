#!/usr/bin/python
# import the python renderman library
import prman

# cube definition from Cube.py by John Macey (https://github.com/NCCA/Renderman/blob/master/Lecture1Intro/Cube.py)
def Cube(width=1.0,height=1.0,depth=1.0) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#front
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
	ri.Patch("bilinear",{'P':face})
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')



ri = prman.Ri() # create an instance of the RenderMan interface
ri.Option("rib", {"string asciistyle": "indented"})

filename = "assignment.rib"
ri.ArchiveRecord(ri.COMMENT, 'assignment.rib')

# Initalise Renderman in Python
ri.Begin("__render") #filename)
# Specify the output
ri.Display("assignment.exr", "it", "rgba")
# Specify 1080p resolution 1:1 pixel Aspect ratio
ri.Format(1920,1080,1)
# set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:50}) 

# Start the world
ri.WorldBegin()

#hdr light & background
ri.TransformBegin() #LIGHT BEGIN-----------------------------------------------{
ri.Rotate(80,1,0,0)
ri.Rotate(180,0,1,0)
ri.Rotate(25,0,0,1)
ri.Light("PxrDomeLight","hdrLight", {"float exposure" : [0], "string lightColorMap" : ["../img/hdr_4k.tx"]})
ri.TransformEnd() #LIGHT End---------------------------------------------------{


ri.ArchiveRecord(ri.COMMENT, 'move everything back')
ri.Translate(0,0,4)

ri.ArchiveRecord(ri.COMMENT, 'lego figure group')
ri.TransformBegin() #LEGO FIGURE BEGIN-----------------------------------------{
ri.Translate(0,0,-1)
ri.Rotate(25, 0, 1, 0)

ri.ArchiveRecord(ri.COMMENT, 'head')
ri.TransformBegin() #HEAD BEGIN--------------------------------------{
ri.Translate(-0.1,0.5,0.1)
ri.Rotate(90,1,0,0)
ri.Cylinder(0.15,-0.125,0.125,360)
ri.TransformEnd() #HEAD END------------------------------------------}

ri.ArchiveRecord(ri.COMMENT, 'chest')
ri.TransformBegin() #CHEST BEGIN-------------------------------------{
ri.TransformEnd() #CHEST END-----------------------------------------}

ri.ArchiveRecord(ri.COMMENT, 'legs group')
ri.TransformBegin() #LEGS BEGIN--------------------------------------{

ri.ArchiveRecord(ri.COMMENT, 'waist')
ri.TransformBegin() #WAIST BEGIN---------------------------{
ri.Translate(-0.12,-0.5,0.1)
Cube(0.43,0.1,0.3)
ri.Translate(0,-0.15,0)
ri.Rotate(90,0,1,0)
ri.Cylinder(0.14,-0.02,0.02,360)
ri.Translate(0,0,0.02)
ri.Disk(0,0.14,360)
ri.TransformEnd() #WAIST END-------------------------------}

ri.ArchiveRecord(ri.COMMENT, 'left leg')
ri.TransformBegin() #LEFT LEG BEGIN-----------------------{
ri.Translate(0,-1.0,0)
Cube(0.2,0.1,0.1)
ri.Translate(0,0.15,0.15)
Cube(0.2,0.4,0.2)
ri.Translate(0,0.2,-0.04)
ri.Rotate(90,0,1,0)
ri.Cylinder(0.14,-0.1,0.1,360)
ri.Translate(0,0,0.1)
ri.Disk(0,0.14,360)
ri.TransformEnd() #LEFT LEG END---------------------------}

ri.ArchiveRecord(ri.COMMENT, 'right leg')
ri.TransformBegin() #RIGHT LEG BEGIN------------------------{
ri.Translate(-0.25,-1.0,0)
Cube(0.2,0.1,0.1)
ri.Translate(0,0.15,0.15)
Cube(0.2,0.4,0.2)
ri.Translate(0,0.2,-0.04)
ri.Rotate(90,0,1,0)
ri.Cylinder(0.14,-0.1,0.1,360)
ri.Translate(0,0,0.1)
ri.Disk(0,0.14,360)
ri.TransformEnd() #RIGHT LEG END----------------------------}

ri.TransformEnd() #LEGS END------------------------------------------}

ri.TransformEnd() #LEGO FIGURE END---------------------------------------------}

ri.ArchiveRecord(ri.COMMENT, 'table')
ri.TransformBegin() #TABLE BEGIN-----------------------------------------------{
ri.Rotate(20,0,1,0)
ri.Translate(-3,-1.3,-1.5)
Cube(8,0.5,5)
ri.TransformEnd() #TABLE END---------------------------------------------------}

ri.WorldEnd()
ri.End()